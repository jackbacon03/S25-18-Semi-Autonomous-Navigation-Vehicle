#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SH110X.h>

Adafruit_SH1107 display = Adafruit_SH1107(64, 128, &Wire);

#define BUTTON_A 15
#define BUTTON_B 32
#define BUTTON_C 14
//UI use GPIO7 
// UART1 use GPIO8
#define RX_PIN 7 
#define TX_PIN 8
HardwareSerial SerialMCF(1); // Movement Control Feather

enum OLED {
  OLED_MAIN,
  OLED_MENU,
  OLED_EDIT_SPEED, //speed
  OLED_EDIT_TGain, //translation
  OLED_EDIT_RGain  //rotation
};
OLED currentOLED = OLED_MAIN;

int menuIndex = 0;
int editIndex = 0;
bool isEditing = false;

int batteryValue = 90;
float GainValue_Rotational = 0.1;
float GainValue_Translational = 0.2;
float kd_rotational = 0.001;
float kp_rotational = 0.001;
float kd_translational = 0.001;
float kp_translational = 0.001;

int speedValue = 10;  
String lastAckMessage = ""; // store the last "ACK: ..." from MCF

unsigned long lastPressTime = 0;
const unsigned long debounceInterval = 200; 
void setup() 
{
  Serial.begin(115200);
  Serial.println("128x64 OLED FeatherWing Menu Example");
  // initialize OLED
  display.begin(0x3C, true); 
  display.clearDisplay();
  display.setRotation(1);
  display.display();
  // initialize button
  pinMode(BUTTON_A, INPUT_PULLUP);
  pinMode(BUTTON_B, INPUT_PULLUP);
  pinMode(BUTTON_C, INPUT_PULLUP);
  // serial to movement feather
  SerialMCF.begin(115200, SERIAL_8N1, RX_PIN, TX_PIN);
  delay(50);
  //  while(!SerialMCF){}
  Serial.println("UI Feather Ready.");
  drawMenu();
}
void loop() {
  

  // Button status
  bool aPressed = !digitalRead(BUTTON_A);
  bool bPressed = !digitalRead(BUTTON_B);
  bool cPressed = !digitalRead(BUTTON_C);

  unsigned long currentTime = millis();
  if (currentTime - lastPressTime > debounceInterval) {
    if (aPressed) {
      handleButtonA();
      lastPressTime = currentTime;
    } else if (bPressed) {
      handleButtonB();
      lastPressTime = currentTime;
    } else if (cPressed) {
      handleButtonC();
      lastPressTime = currentTime;
    }
  }
  if (SerialMCF.available() > 0) {
    String resp = SerialMCF.readStringUntil('\n');
    resp.trim();
    if (resp.length() > 0) {
      Serial.println("MovementFeather => " + resp);
      if (resp.startsWith("ACK:")) {
        lastAckMessage = resp;  // store to show on OLED
        drawMenu();
      } 
      else if (resp.startsWith("ERROR:")) {
        lastAckMessage = resp;
        drawMenu();
      }
      else {
        lastAckMessage = "UnexpResp";
        drawMenu();
      }
    }
  }
  delay(20);
}
// send command UART
void sendCommandToMCF(String cmd) {
  SerialMCF.println(cmd);
  Serial.print("UI => MCF: ");
  Serial.println(cmd);
}

// Button A
void handleButtonA() {
  switch (currentOLED) 
  {
    case OLED_MAIN: //press A, go to menu display
    currentOLED = OLED_MENU;
    menuIndex = 0;
    break;
    case OLED_MENU: 
    if(menuIndex == 0){
      currentOLED = OLED_EDIT_SPEED;
    }
    else if(menuIndex == 1){
      currentOLED = OLED_EDIT_TGain;
      editIndex = 0;
      isEditing = false;
    }
    else if(menuIndex == 2){
      currentOLED = OLED_EDIT_RGain;
      editIndex = 0;
      isEditing = false;
    }
    break;
    case OLED_EDIT_SPEED: // 
    currentOLED = OLED_MAIN;
    break;
    case OLED_EDIT_TGain:
    if(!isEditing) {
      if(editIndex == 3){
        currentOLED = OLED_MAIN;
      }
      else{
        isEditing = true;
      }
    }
    else{
        isEditing = false;
    }
    break;
    case OLED_EDIT_RGain:
    if(!isEditing) {
      if(editIndex == 3){
        currentOLED = OLED_MAIN;
      }
      else{
        isEditing = true;
      }
    }
    else{
        isEditing = false;
    }
    break;

  }
  drawMenu();
}
// button B
void handleButtonB() {
  switch (currentOLED) 
  {
    case OLED_MAIN: //press B, nothing happen
    break;
    case OLED_MENU: // press B, cursor go up
      if (menuIndex > 0)
        menuIndex--;   
      break;  
    case OLED_EDIT_SPEED: 
    speedValue+=10;
    if (speedValue > 255) 
    {
      speedValue = 255;
    }
    Serial.print("Speed: ");
    Serial.println(speedValue); 
    sendCommandToMCF("SPEED=" + String(speedValue));
    break;
    case OLED_EDIT_TGain:
    if(!isEditing){
      if(editIndex > 0){
        editIndex--;
      }
    }
    else{
      if(editIndex == 0){
        GainValue_Translational += 0.01f;
        if (GainValue_Translational < 0.0f) 
        {
          GainValue_Translational = 0.0f;
        }
       Serial.print("T-Gain: ");
       Serial.println(GainValue_Translational, 2); 
       sendCommandToMCF("T-Gain=" + String(GainValue_Translational));
      }
      else if(editIndex == 1){
        kp_translational += 0.001f;
        if (kp_translational > 5.0f) 
        {
          kp_translational = 5.0f;
        }
        Serial.print("P T-Gain: ");
        Serial.println(kp_translational, 3); 
        sendCommandToMCF("P T-Gain=" + String(kp_translational));
      }
      else if(editIndex == 2){ 
        kd_translational += 0.001f;   
        if (kd_translational > 5.0f) 
        {
          kd_translational = 5.0f;
        }
        Serial.print("D T-Gain: ");
        Serial.println(kd_translational, 3); 
        sendCommandToMCF("D T-Gain=" + String(kd_translational));
      }
    }
    break;
    case OLED_EDIT_RGain:
    if(!isEditing){
      if(editIndex > 0){
        editIndex--;
      }
    }
    else{
      if(editIndex == 0){
        GainValue_Rotational += 0.01f;
        if (GainValue_Rotational < 0.0f) 
        {
          GainValue_Rotational = 0.0f;
        }
       Serial.print("R-Gain: ");
       Serial.println(GainValue_Rotational, 2); 
       sendCommandToMCF("R-Gain=" + String(GainValue_Rotational));
      }
      else if(editIndex == 1){
        kp_rotational += 0.001f;
        if (kp_rotational > 5.0f) 
        {
          kp_rotational = 5.0f;
        }
        Serial.print("P R-Gain: ");
        Serial.println(kp_rotational, 3); 
        sendCommandToMCF("P R-Gain=" + String(kp_rotational));
      }
      else if(editIndex == 2){ 
        kd_rotational += 0.001f;   
        if (kd_rotational > 5.0f) 
        {
          kd_rotational = 5.0f;
        }
        Serial.print("D R-Gain: ");
        Serial.println(kd_rotational, 3); 
        sendCommandToMCF("D R-Gain=" + String(kd_rotational));
      }
    }
    break;

  }
  drawMenu();
}
// Button C
void handleButtonC() {
  switch (currentOLED) 
  {
    case OLED_MAIN: //press C, nothing happen
    break;
    case OLED_MENU: // press C, cursor go down
    if (menuIndex < 2){
      menuIndex++; 
    }
    break;
    case OLED_EDIT_SPEED: 
    speedValue-=10; 
    if (speedValue < 0){
      speedValue = 0;
    }     
    Serial.print("Speed: ");
    Serial.println(speedValue);  
    sendCommandToMCF("SPEED=" + String(speedValue));
    break;
    case OLED_EDIT_TGain:
    if(!isEditing){
      if(editIndex < 3){
        editIndex++;
      } 
    }
    else{
      if(editIndex == 0){
        GainValue_Translational -= 0.01f;
        if (GainValue_Translational < 0.0f) 
        {
          GainValue_Translational = 0.0f;
        }
       Serial.print("T-Gain: ");
       Serial.println(GainValue_Translational, 2); 
       sendCommandToMCF("R-Gain=" + String(GainValue_Translational));
      }
      else if(editIndex == 1){
        kp_translational -= 0.001f;
        if (kp_translational < 0.0f) 
        {
          kp_translational = 0.0f;
        }
        Serial.print("P T-Gain: ");
        Serial.println(kp_translational, 3); 
        sendCommandToMCF("P T-Gain=" + String(kp_translational));
      }
      else if(editIndex == 2){ 
        kd_translational -= 0.001f;   
        if (kd_translational < 0.0f) 
        {
          kd_translational = 0.0f;
        }
        Serial.print("D T-Gain: ");
        Serial.println(kd_translational, 3); 
        sendCommandToMCF("D T-Gain=" + String(kd_translational));
      }
    }
    break;
    case OLED_EDIT_RGain:
    if(!isEditing){
      if(editIndex < 3){
        editIndex++;
      }
    }
    else{
      if(editIndex == 0){
        GainValue_Rotational -= 0.01f;
        if (GainValue_Rotational < 0.0f) 
        {
          GainValue_Rotational = 0.0f;
        }
       Serial.print("R-Gain: ");
       Serial.println(GainValue_Rotational, 2); 
       sendCommandToMCF("R-Gain=" + String(GainValue_Rotational));
      }
      else if(editIndex == 1){
        kp_rotational -= 0.001f;
        if (kp_rotational < 0.0f) 
        {
          kp_rotational = 0.0f;
        }
        Serial.print("P R-Gain: ");
        Serial.println(kp_rotational, 3); 
        sendCommandToMCF("P R-Gain=" + String(kp_rotational));
      }
      else if(editIndex == 2){ 
        kd_rotational -= 0.001f;   
        if (kd_rotational < 0.0f) 
        {
          kd_rotational = 0.0f;
        }
        Serial.print("D R-Gain: ");
        Serial.println(kd_rotational, 3); 
        sendCommandToMCF("D R-Gain=" + String(kd_rotational));
      }
    }
    break;

  }
  drawMenu();
}
void drawMenu()
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(SH110X_WHITE);

  switch (currentOLED) {
    case OLED_MAIN:
      mainScreen();
      break;
    case OLED_MENU:
      menuScreen();
      break;
    case OLED_EDIT_SPEED:
      editSpeedScreen();
      break;
    case OLED_EDIT_TGain:
      editTGainScreen();
      break;
    case OLED_EDIT_RGain:
      editRGainScreen();
      break;
  }

  display.display();
}
// the main screenï¼Œ display at first 
void mainScreen()
{
  // display Battery value
  display.setCursor(0, 0);
  display.print("Battery: ");
  display.print(batteryValue);
  display.println("%"); 
  // display Speed value
  display.setCursor(0, 12);
  display.print("Speed: ");
  display.println(speedValue);
  // display Translational gain value
  display.setCursor(0, 24);
  display.print("T-Gain: ");
  display.println(GainValue_Translational, 2);
  // display i gain value
    display.setCursor(0, 36);
  display.print("R-Gain: ");
  display.println(GainValue_Rotational, 2);
  // display Menu mode
  display.setCursor(0, 50);
  display.print("Press A => Menu");  
}
//menu Screen: display the selections
void menuScreen()
{
  // selection 1: Speed
  display.setCursor(0, 0);
  if (menuIndex == 0) {
    display.print("> Speed");
  } else {
    display.print("  Speed");
  }
  // selection 2: T GAIN
  display.setCursor(0, 12);
  if (menuIndex == 1) {
    display.print("> Translation");
  } else {
    display.print("  Translation");
  }
    // selection 3: R GAIN
  display.setCursor(0, 24);
  if (menuIndex == 2) {
    display.print("> Rotation");
  } else {
    display.print("  Rotation");
  }
  // tips
  display.setCursor(0, 50);
  display.print("B/C=Up/Down, A=Select");
}
// Editting Speed screen: increase/decrease values
void editSpeedScreen()
{
  display.setCursor(0,0);
  display.print("Edit Speed");
  display.setCursor(0,16);
  display.print("Speed = ");
  display.println(speedValue);
  display.setCursor(0,30);
  display.print("B=+  C=-  A=Save & Return");
}
// Editting Translation screen: increase/decrease values
void editTGainScreen()
{
  display.setCursor(0,0);
  display.print("Edit Translation:");
  //display Translation gains
  display.setCursor(0,12);
  if(editIndex == 0) {
    if(isEditing)
    {
      display.print("-> T Gains=");
    }
    else{
      display.print("> T Gains=");
    }
  }
  else{
    display.print("  T Gains=");
  }
  display.print(GainValue_Translational, 2);
  // display P
  display.setCursor(0,22);
  if(editIndex == 1) {
    if(isEditing){
      display.print("-> P=");
    }
    else{
      display.print("> P=");
    }  
  }
  else{
    display.print("  P=");
  }
  display.print(kp_translational, 3);

  display.setCursor(0,32);
  if(editIndex == 2){
    if(isEditing){
      display.print("-> D=");
    }
    else{
      display.print("> D=");
    }
  }
  else{
    display.print("  D=");
  }               
  display.print(kd_translational, 3);
  display.setCursor(0,43);
  if(editIndex == 3) {
    if(isEditing){
      display.print("-> Return");
    } 
    else{
      display.print("> Return");
    }          
  } 
  else {
    display.print("  Return");
  }
  display.setCursor(0, 54);
  if(!isEditing){
    display.print("B=Up C=Down A=Select");
  }
  else{
    display.print("B=+ C=- A=Ok");
  }
    
}
//Editting Rotational screen: increase/decrease values
void editRGainScreen()
{
  display.setCursor(0,0);
  display.print("Edit Rotational:");
  //display Rotational gains
  display.setCursor(0,12);
  if(editIndex == 0) {
    if(isEditing)
    {
      display.print("-> R Gains=");
    }
    else{
      display.print("> R Gains=");
    }
  }
  else{
    display.print("  R Gains=");
  }
  display.print(GainValue_Rotational, 2);
  // display P
  display.setCursor(0,22);
  if(editIndex == 1) {
    if(isEditing){
      display.print("-> P=");
    }
    else{
      display.print("> P=");
    }  
  }
  else{
    display.print("  P=");
  }
  display.print(kp_rotational, 3);

  display.setCursor(0,32);
  if(editIndex == 2){
    if(isEditing){
      display.print("-> D=");
    }
    else{
      display.print("> D=");
    }
  }
  else{
    display.print("  D=");
  }               
  display.print(kd_rotational, 3);
  display.setCursor(0,43);
  if(editIndex == 3) {
    if(isEditing){
      display.print("-> Return");
    } 
    else{
      display.print("> Return");
    }          
  } 
  else {
    display.print("  Return");
  }
  display.setCursor(0, 54);
  if(!isEditing){
    display.print("B=Up C=Down A=Select");
  }
  else{
    display.print("B=+ C=- A=Ok");
  }

}
